[ { "title": "How to write a systematic review using PRISMA", "url": "/posts/How_to_write_a_systematic_review_using_PRISMA/", "categories": "Research, Writing, PRISMA, Literature Review", "tags": "writing", "date": "2021-11-16 11:28:09 +1100", "snippet": " The best practise is applying PRISMA as early as possible. It is critical to keep each step is clear and transparent.IntroductionSystematic reviews serve many critical roles. They can provide syntheses of the state of knowledge in a field, from which future research priorities can be identified; they can address questions that otherwise could not be answered by individual studies; they can identify problems in primary research that should be rectified in future studies; and they can generate or evaluate theories about how or why phenomena occur. To ensure a systematic review is valuable to users, authors should prepare a transparent, complete, and accurate account of why the review was done, what they did (such as how studies were identified and selected) and what they found (such as characteristics of contributing studies and results of meta-analyses).Up-to-date reporting guidance facilitates authors achieving this. The Preferred Reporting Items for Systematic reviews and Meta-Analyses (PRISMA) statement, published in 2009, was designed to help systematic reviewers transparently report why the review was done, what the authors did, and what they found. The PRISMA 2020 statement replaces the 2009 statement, which consists of a 27-item checklist, an expanded checklist that details reporting recommendations for each item, the PRISMA 2020 abstract checklist, and revised flow diagrams for original and updated reviews. The authors are encouraged to refer to PRISMA 2020 early in the writing process.The core of PRISMAThe core of PRISMA consists of three main parts, including (1) Abstract checklist, (2) Item checklist and an expanded checklist, and (3) flow diagram of review progress.Table 1. PRISMA 2020 for Abstracts checklist Section and topic Item number Checklist item Title     Title 1 Identify the report as a systematic review. Background     Objectives 2 Provide an explicit statement of the main objective(s) or question(s) the review addresses. Methods     Eligibility criteria 3 Specify the inclusion and exclusion criteria for the review. Information sources 4 Specify the information sources (e.g. databases, registers) used to identify studies and the date when each was last searched. Risk of bias 5 Specify the methods used to assess risk of bias in the included studies. Synthesis of results 6 Specify the methods used to present and synthesise results. Results     Included studies 7 Give the total number of included studies and participants and summarise relevant characteristics of studies. Synthesis of results 8 Present results for main outcomes, preferably indicating the number of included studies and participants for each. If meta-analysis was done, report the summary estimate and confidence/credible interval. If comparing groups, indicate the direction of the effect (i.e. which group is favoured). Discussion     Limitations of evidence 9 Provide a brief summary of the limitations of the evidence included in the review (e.g. study risk of bias, inconsistency and imprecision). Interpretation 10 Provide a general interpretation of the results and important implications. Other     Funding 11 Specify the primary source of funding for the review. Registration 12 Provide the register name and registration number. Table 2. PRISMA 2020 item checklistExpanded PRISMA checklist can be downloaded here.PRISMA 2020 flow diagram template for systematic reviews.More information can be found (Here), enjoy your writing! [1] Page MJ, McKenzie JE, Bossuyt PM, Boutron I, Hoffmann TC, Mulrow CD, et al. The PRISMA 2020 statement: an updated guideline for reporting systematic reviews. BMJ 2021;372:n71. doi: 10.1136/bmj.n71" }, { "title": "Some ideas about gene essentiality prediction and graph neural network", "url": "/posts/About_Gene_Essentiality_prediction/", "categories": "Research, Sequence analysis", "tags": "gene essentiality", "date": "2021-11-11 19:38:09 +1100", "snippet": "What is the definition of gene essentiality (GE)?Gene essentiality is a core concept of genetics, and has important relevance in relation to fundamental areas such as evolutionary, and systems and synthetic biology, and applicability in drug development. Essential genes (EGs) are often responsible for important biological processes and cellular fitness in an organism, and are critical for its survival. The essentiality of a gene is highly dependent on various factors including the genetic context, genetic background of the host and environment (15). Hence, gene essentiality is not a static, but rather a context-dependent property of a gene.How to annotate it?All ‘lethal’ terms and their descendants were extracted from the phenotype_ontology. WS270.obo file and all ‘not lethal’ terms from the association file (phenotype_association.WS270.wb; column 4). We used the latter file to identify individual genes reported (in the peer-reviewed literature) to be linked to ‘lethal’ or ‘not lethal’ phenotypes upon RNAi. For each gene, we then calculated an essentiality score (ES), defined as the total number of RNAi experiments reporting essential/lethal (E) terms squared divided by the total number of experiments reporting essential/lethal and non- essential/viable terms (T) squared (E2/T2). A gene was provisionally assigned as ‘‘essential” (ES &amp;gt; 0.9) or ‘‘non-essential” (ES &amp;lt; 0.1); any other genes with an ES between !0.1 and 0.9 were assigned as ‘‘conditionally-essential”.Related publication resources. Campos, T. L., Korhonen, P. K., Gasser, R. B., &amp;amp; Young, N. D. (2019). An Evaluation of Machine Learning Approaches for the Prediction of Essential Genes in Eukaryotes Using Protein Sequence-Derived Features. Computational and Structural Biotechnology Journal, 17, 785–796. https://doi.org/10/gm9pc3 Campos, T. L., Korhonen, P. K., Hofmann, A., Gasser, R. B., &amp;amp; Young, N. D. (2020). Combined use of feature engineering and machine-learning to predict essential genes in Drosophila melanogaster. NAR Genomics and Bioinformatics, 2 (3), lqaa051. https://doi.org/10/gm9pc7 Campos, T. L., Korhonen, P. K., Sternberg, P. W., Gasser, R. B., &amp;amp; Young, N. D. (2020). Predicting gene essentiality in Caenorhabditis elegans by feature engineering and machine-learning. Computational and Structural Biotechnology Journal, 18, 1093–1102. https://doi.org/10/gh33dp Gurumayum, S., Jiang, P., Hao, X., Campos, T. L., Young, N. D., Korhonen, P. K., Gasser, R. B., Bork, P., Zhao, X.-M., He, L., &amp;amp; Chen, W.-H. (2021). OGEE v3: Online GEne Essentiality database with increased coverage of organisms and human cell lines. Nucleic Acids Research, 49 (D1), D998–D1003. https://doi.org/10/gm9pc6The feasibility of predicting GE using graph neural networks." }, { "title": "Elegant way of using deep learning on AMD Mac", "url": "/posts/The-way-to-deep-learning-with-AMD-GPU-on-Mac-OS/", "categories": "Research, Deep learning", "tags": "computational configuration", "date": "2018-11-12 09:38:09 +1100", "snippet": " Fabrice’s blog Deep Learning on a Mac with AMD GPUAn elegant solution for Deep Learning — PlaidMLMainstream deep learning frameworks, such as Tensorflow, PyTorch, and Caffe 2, are not so friendly for AMD Mac.Among the solutions introduced in Fabrice’s blog, PlaidML is an elegant one to me.The installation and configuration of PlaidML can be found in the documentation of PlaidML.The source code shown below is a quick guide for beginner, which is based on PlaidML + Keras:#import the following two lines first!import plaidml.kerasplaidml.keras.install_backend()#Import libraries and modulesimport numpy as npnp.random.seed(123) # for reproducibilityfrom keras.models import Sequentialfrom keras.layers import Dense, Dropout, Activation, Flattenfrom keras.layers import Convolution2D, MaxPooling2Dfrom keras.utils import np_utilsfrom keras.datasets import mnist#Load pre-shuffled MNIST data into train and test sets(X_train, y_train), (X_test, y_test) = mnist.load_data()#Preprocess input dataX_train = X_train.reshape(X_train.shape[0], 28, 28, 1)X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)X_train = X_train.astype(&#39;float32&#39;)X_test = X_test.astype(&#39;float32&#39;)X_train /= 255X_test /= 255#Preprocess class labelsY_train = np_utils.to_categorical(y_train, 10)Y_test = np_utils.to_categorical(y_test, 10)#Define model architecturemodel = Sequential()model.add(Convolution2D(32, (3, 3), activation=&#39;relu&#39;, input_shape=(28,28,1)))model.add(Convolution2D(32, (3, 3), activation=&#39;relu&#39;))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Dropout(0.25))model.add(Flatten())model.add(Dense(128, activation=&#39;relu&#39;))model.add(Dropout(0.5))model.add(Dense(10, activation=&#39;softmax&#39;))#Compile modelmodel.compile(loss=&#39;categorical_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])#Fit model on training datamodel.fit(X_train, Y_train, batch_size=32, nb_epoch=10, verbose=1)#Evaluate model on test datascore = model.evaluate(X_test, Y_test, verbose=0)print(score)" } ]
